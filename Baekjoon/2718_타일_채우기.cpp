#include<iostream>

using namespace std;

int dp[501][1 << 4];

int main(void) {

    ios_base :: sync_with_stdio(0);
    cin.tie(0);

    int T;
    cin >> T;
    

    dp[0][15] = 1;

    // 3, 12, 9는 지금 수에서 끝마칠 수 있는 수 / 6은 다음으로 이어갈 수있게 해주는 수
    for (int i = 1; i <= 500; i++) {
        //1은 채워져 있는 것

        //i-1의 1111완성된 경우의 수에 1100을 을 하면 타일은 2*1 이므로 다음인 i는 0011을 선택할 수 밖에 없다
        dp[i][3] = dp[i-1][15] + dp[i-1][12];
        //마찬 가지로 위와 반대
        dp[i][12] = dp[i-1][15] + dp[i-1][3];
        
        //가장 찾기 어려웠던 수 6 즉 0110에서는 끝낼 수 없다 전의 값이 9 즉 1001에서 이어갈 수 있는 수이다 이어가는 수 이므로 그냥 전 값만 더해준다 오로지 9다
        dp[i][6] = dp[i-1][9]; 

        //9는 저의 수나 6이어야지만 나올 수 있는 수
        dp[i][9] = dp[i-1][15] + dp[i-1][6];

        //딱 깔끔히 4*i를 채울 수 있는 경우의 수들 마지막 d[i-2][15]는 dp[i-1][15]에서 1111을 썻을 때 이번 수는 쓰지 않는다. 즉 dp[i-2][15]의 값을 가져옴
        dp[i][15] = dp[i-1][15] + dp[i-1][9] + dp[i-1][12] + dp[i-1][3]+ (i>=2?dp[i-2][15]:0);
    }

    while (T--) {
        int N; 
        cin >> N;
        cout << dp[N][15] <<'\n';
    }
    return 0;
}